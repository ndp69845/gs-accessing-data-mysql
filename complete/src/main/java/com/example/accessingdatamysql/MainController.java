package com.example.accessingdatamysql;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.CacheManager;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

@RestController	// This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	@Autowired UserService userService;

	@PostMapping(path="/add") // Map ONLY POST Requests
	public @ResponseBody String addNewUser (@RequestParam String name
			, @RequestParam String email) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		User n = new User();
		n.setName(name);
		n.setEmail(email);
		userRepository.save(n);
		return "Saved";
	}

	@GetMapping(path="/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}

	@GetMapping(path="/find")
	public @ResponseBody User getUser(@RequestParam int id) {
		// This returns a JSON or XML with the users
		return userService.getUserById(id);
	}


	 
    @Autowired
	private CacheManager cacheManager;

	@GetMapping(path="/findInCache")
	public @ResponseBody User getUserByCache(@RequestParam int id) {
		// This returns a JSON or XML with the users
		System.out.println("************ Finding cache");
		for(String s : cacheManager.getCacheNames()) {
			System.out.println("********** [" + s + "]");
		}
		return (User)cacheManager.getCache("userCache").get(id).get();
	}
}
